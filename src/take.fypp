#:include "common/common.fypp"
#:set IR_KINDS_TYPES = INT_KINDS_TYPES + REAL_KINDS_TYPES
!===============================================================================
! The "take" operation
! Last edited: Sep 14, 2021 (JVDP)
!===============================================================================
MODULE mod_moa_take
  USE mod_prec
  USE ISO_FORTRAN_ENV, ONLY: u => error_unit

  IMPLICIT NONE

  PRIVATE
  PUBLIC :: moa_take

  INTERFACE moa_take

    ! scalar take vector
#:for k1, t1 in INT_KINDS_TYPES
  #:for k2, t2 in IR_KINDS_TYPES
    MODULE PROCEDURE take_sv_${k1}$_${k2}$
  #:endfor
#:endfor

  END INTERFACE moa_take

  interface check_overtake

#:for k1, t1 in INT_KINDS_TYPES
    module procedure check_overtake_${k1}$
#:endfor

end interface

CONTAINS

!===================================================
! Helper function to print error message on overtake
!===================================================
#:for k1, t1 in INT_KINDS_TYPES
  LOGICAL FUNCTION check_overtake_${k1}$ ( sigma, n )
    ! Input arguments
    ${t1}$, INTENT(IN) :: sigma, n

    ! Internal variables
    LOGICAL :: lvalid

    ! Initialize
    lvalid = .FALSE.

    IF( ABS(sigma) <= n ) THEN
      lvalid = .TRUE.
    ELSE
      lvalid = .FALSE.
      WRITE(u,'(A,g0,A,g0)') 'Error[moa_take]: Overtake not allowed ', &
                               sigma, ' out of ', n
    END IF

    check_overtake_${k1}$ = lvalid
  END FUNCTION check_overtake_${k1}$
#:endfor

!===============================================================================
! Implementation of scalar take vector for ${k1} scalar and ${k2} vector
!===============================================================================
#:for k1, t1 in INT_KINDS_TYPES
  #:for k2, t2 in IR_KINDS_TYPES
  FUNCTION take_sv_${k1}$_${k2}$ ( sigma, vec ) RESULT( take )

    IMPLICIT NONE

    ! Arguments
    ${t1}$, INTENT(IN) :: sigma
    ${t2}$, INTENT(IN), TARGET :: vec(:)
    ${t2}$, POINTER :: take(:)

    ! Internal variables
    ${t1}$ :: n
    LOGICAL :: lvalid

    n = SIZE( vec, 1 )
    lvalid = check_overtake( sigma, n )
    IF( lvalid ) THEN

      IF( sigma > 0 ) THEN

        ! Positive take
        take => vec( :sigma )

      ELSE

        ! Negative take
        ! Note how +1 is needed here to account for 1-based Fortran indexing
        take => vec( (n+sigma+1): )

      END IF

    ELSE

      ! Overtake
      NULLIFY(take)

    END IF

  END FUNCTION take_sv_${k1}$_${k2}$
  #:endfor
#:endfor

!===============================================================================

END MODULE mod_moa_take
